{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script>\n",
       "code_show=true; \n",
       "function code_toggle() {\n",
       " if (code_show){\n",
       " $('div.input').hide();\n",
       " } else {\n",
       " $('div.input').show();\n",
       " }\n",
       " code_show = !code_show\n",
       "} \n",
       "$( document ).ready(code_toggle);\n",
       "</script>\n",
       "<form action=\"javascript:code_toggle()\"><input type=\"submit\" value=\"Click here to toggle on/off the raw code.\"></form>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import HTML\n",
    "\n",
    "HTML('''<script>\n",
    "code_show=true; \n",
    "function code_toggle() {\n",
    " if (code_show){\n",
    " $('div.input').hide();\n",
    " } else {\n",
    " $('div.input').show();\n",
    " }\n",
    " code_show = !code_show\n",
    "} \n",
    "$( document ).ready(code_toggle);\n",
    "</script>\n",
    "<form action=\"javascript:code_toggle()\"><input type=\"submit\" value=\"Click here to toggle on/off the raw code.\"></form>''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPooling2D,BatchNormalization\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "from collections import Counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Codes to load the dataset \n",
    "train = np.load('train_images.npy')\n",
    "valid = np.load('test_images.npy')\n",
    "train_label = np.load('train_labels.npy')\n",
    "# change the data into pandas dataframe\n",
    "train = pd.DataFrame(train)\n",
    "valid = pd.DataFrame(valid)\n",
    "train_label = pd.DataFrame(train_label)\n",
    "train_label.columns = ['labels']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1 Exploratory Analysis (10 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I first try to understand the dataset and how it works. So this dataset is a dataset of fashion images. Each observation contains 784 columns which is to combine a 28x28 image matrix into one row. Our task is to classify each observation into categories based on their image information.\n",
    "\n",
    "My english is not that good, therefore I use my own understandings to give each labels name based on their graphical representations, which is 0 represents as T shirt, 1 as pants, 2 as heavier than shirt, 3 as dress, 4 as coat, 5 as sandal, 6 as shirt, 7 as sneaker, 8 as bag and 9 as ankle Boot.\n",
    "\n",
    "First I try to observe in the training set, how many numbers of observations do each class represent? Is it a biased dataset or it's equal weighted? I got the result:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'T-shirt': 5543,\n",
       " 'Coat': 5444,\n",
       " 'Bag': 5496,\n",
       " 'Shirt': 5499,\n",
       " 'Sandal': 5512,\n",
       " 'Dress': 5507,\n",
       " 'Heavier than shirt': 5507,\n",
       " 'Ankle Boot': 5488,\n",
       " 'Sneaker': 5510,\n",
       " 'Pants': 5494}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create the dictionary for each labels \n",
    "#used to output the different fashion styles numbers\n",
    "data_label = {0 : \"T-shirt\", 1: \"Pants\", 2: \"Heavier than shirt\", 3: \"Dress\", 4: \"Coat\",\n",
    "          5: \"Sandal\", 6: \"Shirt\", 7: \"Sneaker\", 8: \"Bag\", 9: \"Ankle Boot\"}\n",
    "\n",
    "label_c = train_label[\"labels\"].value_counts() #count the different label appearance time \n",
    "label_c.keys()[1]\n",
    "d = {}\n",
    "for i in range(len(label_c)):\n",
    "    #append the value counts to the corresponding label names in the data_label dic created above\n",
    "    index = label_c.keys()[i]# get the keys\n",
    "    l = data_label[index] #corresponding to the label name\n",
    "    d[l] = label_c[i]# match the value counts \n",
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Create the visualization of the dic above \n",
    "dd = pd.DataFrame(d,index=[0]).T\n",
    "dd.columns = ['num']\n",
    "fig = plt.subplots(figsize=(15,5))\n",
    "plt.bar(dd.index,dd.num)\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Therefore, we can see that we have a balanced dataset with approximately equal number of observations for each label. So what we are going to do is a balanced image classification dataset and we read information from the 28x28 pixels and classify the corresponding labels to each observation. \n",
    "\n",
    "In order to get a more clear idea on how the image looks like, I visualize 5 sample graphs of each label class as below: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = np.load('train_labels.npy')\n",
    "train2 = train.copy()\n",
    "train2['labels'] = labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt_images = []\n",
    "plt_labels = []\n",
    "\n",
    "    \n",
    "for i in label_c.keys():\n",
    "    #for all labels i in the dataset \n",
    "    s = train2[train2[\"labels\"] == i] # get all observations with the corresponding label i\n",
    "    sample = s.sample(n=5) #randomly sample 5 observations from this label \n",
    "    for j, s in enumerate(sample.values):\n",
    "        img = np.array(sample.iloc[j, :-1]).reshape(28,28) #reshape each observation back to 28x28 pixel matrix\n",
    "        plt_images.append(img) #append the images, used to visualizing \n",
    "        plt_labels.append(sample.iloc[j, -1]) #append the label \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x864 with 50 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot these sample images for each label \n",
    "f, ax = plt.subplots(5,10, figsize=(16,12))\n",
    "\n",
    "for i, img in enumerate(plt_images):\n",
    "    ax[i//10, i%10].imshow(img, cmap='Blues')\n",
    "    ax[i//10, i%10].axis('off')\n",
    "    ax[i//10, i%10].set_title(data_label[plt_labels[i]])\n",
    "plt.show()    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After reading a lot of paper and documents about the image classifications, I find out that there are two most efficients machine learning alogrithms that can classify the image the best. First is CNN which is the convolutional neural networks. And the second one is to use Random forest to classify the images. \n",
    "\n",
    "Sample papers and documents are below that I refer: (There are also many others but just providing two samples here)\n",
    "\n",
    "https://medium.com/intro-to-artificial-intelligence/simple-image-classification-using-deep-learning-deep-learning-series-2-5e5b89e97926\n",
    "\n",
    "http://www.cs.huji.ac.il/~daphna/course/CoursePapers/bosch07a.pdf\n",
    "\n",
    "\n",
    "Therefore, after doing the through expolaratory analysis I decide to Use two algorithms: CNN and Random Forest to deal with this problem. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2 Models "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first algorithm that comes to my head is CNN. Before looking at this assignment, I already heard about how CNN works well on the image classifications. In order to further prove my previous experiences, I research a lot online and conclude some of my personal perspectives: (These conclusions are all cited below):\n",
    "\n",
    "1. the idea presented by Yann le cun in 1998: CNNs can be thought of automatic feature extractors from the image. If we just treat the images as vectors and do the machine learning algorithms, we may lose a lot of correlated information lie inside the matrix of the images. But CNN can solve that problem by effectively using adjacent pixel information to first make the image matrix simpler but remain the information of these matrix by using convolution and then use a dense layer to make the predictions. \n",
    "\n",
    "2. Deep learning yields less error than simple machine learning, implying higher accuracy. Deep learning is not to say only perceptrons with the multi-layers, it still has a big advantage is his freedom. Deep learning can be treated as an architecture that contains a large freedom so people can always find the best \"model\" which best fir the dataset. Deep learning just mimic how human brain works. \n",
    "\n",
    "3. Because CNN use multiple processing of the convolutional layer and the dense layer, it contains both the advantages of convolutional and deep neural network in the image classification. \n",
    "\n",
    "4. Since Steinkrau showed the value of using GPUs for machine learning in 2005: \"modern GPU computing and parallel computing methods have massively increased the ability to train CNN models, causing the rise of using CNN in image classification in the recent years.\"(cited Steinkrau,2005) Thus We can now train neural networks with very large dataset pretty efficiently with lower time cost and higher accuracy. \n",
    "\n",
    "Therefore, the first algorithm I decide to use for the image classification is the CNN. Not only because of its higher accuracy than other algorithms (https://medium.com/intuitionmachine/why-deep-learning-is-radically-different-from-machine-learning-945a4a65da4d) but also because how it's suitable for the image classification (as described above and https://www.quora.com/Why-does-the-convolutional-neural-network-have-higher-accuracy-precision-and-recall-rather-than-other-methods-like-SVM-KNN-and-Random-Forest/answer/Haohan-Wang and https://arxiv.org/abs/1702.07800) and how it cost not that much time. (I tried later, usually takes above 2-3 hours, approximately similar time with SVM but much higher accuracy.) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cited Reference:\n",
    "\n",
    "https://www.quora.com/Why-is-CNN-used-for-image-classification-and-why-not-other-algorithms\n",
    "\n",
    "https://prakhartechviz.blogspot.com/2019/01/image-classification-keras.html\n",
    "\n",
    "https://en.wikipedia.org/wiki/Kernel_(image_processing)#Convolution\n",
    "\n",
    "https://pdfs.semanticscholar.org/b8e3/613d60d374b53ec5b54112dfb68d0b52d82c.pdf\n",
    "\n",
    "https://web.stanford.edu/class/cs231a/prev_projects_2016/example_paper.pdf\n",
    "\n",
    "https://medium.com/intuitionmachine/why-deep-learning-is-radically-different-from-machine-learning-945a4a65da4d\n",
    "\n",
    "https://www.quora.com/Why-does-the-convolutional-neural-network-have-higher-accuracy-precision-and-recall-rather-than-other-methods-like-SVM-KNN-and-Random-Forest/answer/Haohan-Wang\n",
    "\n",
    "https://arxiv.org/abs/1702.07800"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second model I decide to use is the random forest. The reasons that I decide to use the random forest is because:\n",
    "\n",
    "1. using random forests with appropriate parameters significantly reduce both the training cost and the test cost over SVM and at the same time, having a comparable performance which is similar accuracy. \n",
    "\n",
    "2. \"Random forests is an ensemble model which means that it uses the results from many different models to calculate the predicted label. Always the results getting from many models is better than only getting from one model\".(Dahinden 2009). \n",
    "\n",
    "3. Comparable results and accuracy with other machine learning models but not sensitive to the parameters chosen. And Easy to determine which parameters to be used(just used a cross validation can tune the parameter pretty well). \n",
    "\n",
    "4. Avoid overfitting and avoid correlations. \n",
    "\n",
    "5. The python code and library of random Forest is pretty easy to implement. \n",
    "\n",
    "Therefore, Even though I dont expect the accuracy of Random forest can exceeds the CNN, but I do believe that in other ways the random forest should be a better model than other machine learning algorithms because of its less cost, less correlation effects, not very sensitive to the parameters, easy to tune the parameters, easier to implement, etc. \n",
    "\n",
    "In other words, I believe that the deep learning (CNN) will yield the highest accuracy because the reasons and references I provide above, for the second Algorithm I personally believe other machine learning algorithms will yield similar accuracy. So I rather choose an algorithm with easy parameterization and less cost and can at the same time avoid correlations. \n",
    "\n",
    "Thus I decide to use the random forest as my second model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cited Reference:\n",
    "\n",
    "http://www.cs.huji.ac.il/~daphna/course/CoursePapers/bosch07a.pdf\n",
    "\n",
    "http://wgrass.media.osaka-cu.ac.jp/gisideas10/papers/04aa1f4a8beb619e7fe711c29b7b.pdf\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Splits (5 in the kaggle template) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I did the k-folds cross validation for my training data. And I set different K for CNN and random forest because their running time. \n",
    "\n",
    "Since CNN model spent a significantly larger running time than Random forest, I dont want my training model to run forever. Therefore, I set K=5 for the CNN and K = 10 for the random forest. \n",
    "\n",
    "Because the predictive classes in the training data are nearly evenly distributed, so I did not use the stratified K fold but only the simple K fold. For the CNN, I divided the training data to 5 equal pieces and run the cross validation (4 of 5 to be the training and the remaining one to be the validation). I output the average accuracy of 5 validation set. I think I did not overfit the training set because the each fold cross validation only train on 4 of 5 training set but not the left out validation set. So my final average accuracy is valid. \n",
    "\n",
    "I did the same thing for the random forest and the only difference is that I divide the training data to 10 sub datasets not 5. \n",
    "\n",
    "Code for CNN data splits:\n",
    "\n",
    "kf = KFold(n_splits=5,random_state=2019,shuffle=True)\n",
    "\n",
    "Code for RF data splits:\n",
    "\n",
    "kf_rf = KFold(n_splits=10,random_state=2022,shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = keras.utils.to_categorical(train_label.labels, 10) #alternate the dataset ready for CNN \n",
    "num_images = train.shape[0]\n",
    "x_as_array = train.values\n",
    "X = train.values.reshape(num_images, 28, 28, 1)# get ready the X for CNN \n",
    "kf = KFold(n_splits=5,random_state=2019,shuffle=True)# 5 folds split the data "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training (CNN)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's not an easy task to build a suitable deep learning model. Because there are so many choices and hyperparameters that can be used in the CNN, I have to make a lot of selections.\n",
    "\n",
    "For the CNN model, there are several parameters (not hyperparameters that I tuned later) I want to explain why I was using these instead of others:\n",
    "\n",
    "1. The structure of the neural network\n",
    "\n",
    "2. activation function \n",
    "\n",
    "3. kernel-initializer \n",
    "\n",
    "4. kernel size\n",
    "\n",
    "5. optimizer \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. The structure of the neural network\n",
    "\n",
    "Based on the paper and referenced above, especially the article: https://medium.com/intro-to-artificial-intelligence/simple-image-classification-using-deep-learning-deep-learning-series-2-5e5b89e97926, I decide to use layers of Conv2D with a Maxpooling and final two dense layers(the last one is the softmax to get the prediction classes) to be the structure of my deep learning model.\n",
    "\n",
    "The other references of why I choose that structure is:\n",
    "\n",
    "https://towardsdatascience.com/the-4-convolutional-neural-network-models-that-can-classify-your-fashion-images-9fe7f3e5399d\n",
    "\n",
    "https://www.geeksforgeeks.org/image-classifier-using-cnn/\n",
    "\n",
    "https://developers.google.com/machine-learning/practica/image-classification/convolutional-neural-networks\n",
    "\n",
    "Based on these reference, I decide my neural network structure to be number of Conv2d, Maxpooling, dropout layers combine with Two Dense layers at the end. That was my basic structure of my neural network. \n",
    "\n",
    "2. Activation function\n",
    "\n",
    "The reason why I choose the activation = 'relu' is that the CNN applies a Rectified Linear Unit transformation to the convolved feature, in order to introduce the non-linearity. We know that if we dont add an appropriate activation function, the model will just like a linear regression which is not making sense. Relu: F(x) = max(0,x) returns all x for x>0 and 0 for x<0 and its purpose is to present non-linearity into the CNN model. the dataset we are using for the image classification needs first, non-linearity, and second, non-negative value. Therefore, relu is the most appropriate activation function for this dataset. \n",
    "\n",
    "3. Kernel-initializer\n",
    "\n",
    "I set kernel_initializer to be 'he_normal' basically inspired by: https://datascience.stackexchange.com/questions/13061/when-to-use-he-or-glorot-normal-initialization-over-uniform-init-and-what-are because I think that 'he_normal' is the most suitable initializer for our dataset.\n",
    "\n",
    "And of course the dimension of each plot of our data is 28x28, so thats why we set the input shape to be (28,28,1).\n",
    "\n",
    "4. kernel size\n",
    "\n",
    "I have explained why I use relu and he_normal above. I use (2,2) for MaxPooling2D((2, 2) because based on the articles I referenced above, (3,3) is too much for the 28x28 image classification(too many information will be ignored) and (1,1) is meaningless for the MaxPooling. So (2,2) is the only suitable hyperparameter for the MaxPooling and I no longer to tune it anymore.\n",
    "\n",
    "5. optimizer\n",
    "\n",
    "I choose optimizer = adam because I referenced by this article: https://blog.algorithmia.com/introduction-to-optimizers/. It is the combination of Momentum and RMSprop (combine their advantages) and it's very useful and currently very popular for the neural network.\n",
    "\n",
    "I also provide a running time below all of my training algorithms to compare their running times. \n",
    "\n",
    "### Remainder: all the running time below are the running time of 5-folds cross validation. So the actual running time of training will be much less than the running presented below. These are just for the running time comparisons between each models in order to tune the model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hyperparameter Selection (CNN) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After deciding all the parameters above, There are still several parameters in the CNN model that I have to tune, and I will try to tune these parameters below. Because of the long running time of the Neural network models, I cannot made a list and tune all of them at the same time it will cost very very long time to run, so I have to try to tune them one by one: \n",
    "\n",
    "1. Number of layers in the model \n",
    "\n",
    "2. Drop out coefficients \n",
    "\n",
    "3. coefficients in Conv2D\n",
    "\n",
    "4. coefficients in Dense Layer "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first model I used is:\n",
    "\n",
    "model1 = Sequential()\n",
    "\n",
    "model1.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "\n",
    "model1.add(MaxPooling2D((2, 2)))\n",
    "\n",
    "model1.add(Dropout(0.25))\n",
    "\n",
    "model1.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "\n",
    "model1.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model1.add(Dropout(0.25))\n",
    "\n",
    "model1.add(Flatten())\n",
    "\n",
    "model1.add(Dense(64, activation='relu'))\n",
    "\n",
    "model1.add(Dropout(0.3))\n",
    "\n",
    "model1.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model1.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "The average accuracy is about 0.945 and running time is slightly less than 3 hours. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "model1 = Sequential()# define the model \n",
    "\n",
    "#first add 32 Conv layer \n",
    "model1.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "#Add a maxpooling layer\n",
    "model1.add(MaxPooling2D((2, 2)))\n",
    "# Add dropout term to avoid overfitting\n",
    "model1.add(Dropout(0.25))\n",
    "# Then add 64 conv layer \n",
    "model1.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "# Add a Maxpooling\n",
    "model1.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "#Add dropout term to avoid overfitting\n",
    "model1.add(Dropout(0.25))\n",
    "#Flatten to prepare for the dense layer\n",
    "model1.add(Flatten())\n",
    "#Add a 64 layer dense layer\n",
    "model1.add(Dense(64, activation='relu'))\n",
    "#Add dropout term to avoid overfitting\n",
    "model1.add(Dropout(0.3))\n",
    "# use softmax to classify to each labels \n",
    "model1.add(Dense(10, activation='softmax'))\n",
    "\n",
    "# define the loss, optimizer and metrics. \n",
    "model1.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 6h 50min 37s, sys: 54min 28s, total: 7h 45min 5s\n",
      "Wall time: 2h 49min 22s\n"
     ]
    }
   ],
   "source": [
    "%%time #to calculate the time used \n",
    "\n",
    "overall_accu1 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    # transform train and valid x,y to numpy array\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    # fit the model \n",
    "    train_model1 = model1.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  )\n",
    "    # get the validation accuracy for each fold \n",
    "    acc1 = train_model1.history['val_acc'][-1]\n",
    "    overall_accu1.append(acc1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9451272727446123"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(overall_accu1)/5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a decent accuracy and running time but I still want to tune the parameter to see if it can work better. I keep all other things equal and set the first dense layer to be 128: \n",
    "\n",
    "model11 = Sequential()\n",
    "\n",
    "model11.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "\n",
    "model11.add(MaxPooling2D((2, 2)))\n",
    "\n",
    "model11.add(Dropout(0.25))\n",
    "\n",
    "model11.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "\n",
    "model11.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model11.add(Dropout(0.25))\n",
    "\n",
    "model11.add(Flatten())\n",
    "\n",
    "model11.add(Dense(128, activation='relu'))\n",
    "\n",
    "model11.add(Dropout(0.3))\n",
    "\n",
    "model11.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model11.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "              \n",
    "Now the new accuracy is about 0.959 and running time still slightly less than 3 hours. Implying that increasing Dense layer can improve the performance of the model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "#basically same code as above\n",
    "model11 = Sequential()\n",
    "\n",
    "model11.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model11.add(MaxPooling2D((2, 2)))\n",
    "model11.add(Dropout(0.25))\n",
    "model11.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model11.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model11.add(Dropout(0.25))\n",
    "model11.add(Flatten())\n",
    "model11.add(Dense(128, activation='relu'))\n",
    "model11.add(Dropout(0.3))\n",
    "model11.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model11.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 6h 58min 33s, sys: 56min 31s, total: 7h 55min 5s\n",
      "Wall time: 2h 57min 48s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "overall_accu11 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model11 = model11.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc11 = train_model11.history['val_acc'][-1]\n",
    "    overall_accu11.append(acc11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.959199999852614"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(overall_accu11)/5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then I tried to tune the kernel size and add two more conv layers into the model to see what will happen: \n",
    "\n",
    "model111 = Sequential()\n",
    "\n",
    "model111.add(Conv2D(32, kernel_size=(5, 5),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "\n",
    "model111.add(Conv2D(32, kernel_size=(5, 5),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "\n",
    "model111.add(MaxPooling2D((2, 2)))\n",
    "\n",
    "model111.add(Dropout(0.25))\n",
    "\n",
    "model111.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "\n",
    "model111.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "\n",
    "model111.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model111.add(Dropout(0.25))\n",
    "\n",
    "model111.add(Flatten())\n",
    "\n",
    "model111.add(Dense(128, activation='relu'))\n",
    "\n",
    "model111.add(Dropout(0.3))\n",
    "\n",
    "model111.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model111.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "              \n",
    "The resulting accuracy did not improve, which is about 0.9537 but the running time is significantly larger, which is more than 12 hours. So I conclude that increasing kernel size and add more layers is meaningless and too time costly. So I decide just to set kernel_size to be (3,3) and keep the original structure. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "#basically same code as above\n",
    "model111 = Sequential()\n",
    "\n",
    "#add two consecutive 32 Conv2D layer \n",
    "model111.add(Conv2D(32, kernel_size=(5, 5),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model111.add(Conv2D(32, kernel_size=(5, 5),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model111.add(MaxPooling2D((2, 2)))\n",
    "model111.add(Dropout(0.25))\n",
    "#add two consecutive 64 Conv2D layer \n",
    "model111.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model111.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model111.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model111.add(Dropout(0.25))\n",
    "model111.add(Flatten())\n",
    "model111.add(Dense(128, activation='relu'))\n",
    "model111.add(Dropout(0.3))\n",
    "model111.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model111.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1d 4min 5s, sys: 4h 37min 44s, total: 1d 4h 41min 49s\n",
      "Wall time: 12h 18min 11s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "overall_accu111 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model111 = model111.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc111 = train_model111.history['val_acc'][-1]\n",
    "    overall_accu111.append(acc111)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9537454546755011"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(overall_accu111)/5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then I tried to tune the convolutional layer. I tried to add one more convolutional layer: Conv2D(16, kernel_size=(3, 3),activation='relu',kernel_initializer='he_normal',input_shape=(28, 28, 1)) to the first model I tried and to see whether the performance will be improved:\n",
    "\n",
    "model2 = Sequential()\n",
    "\n",
    "model2.add(Conv2D(16, kernel_size=(3, 3),activation='relu',kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "\n",
    "model2.add(MaxPooling2D((2, 2)))\n",
    "\n",
    "model2.add(Dropout(0.25))\n",
    "\n",
    "model2.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))\n",
    "\n",
    "model2.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model2.add(Dropout(0.25))\n",
    "\n",
    "model2.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "\n",
    "model2.add(Dropout(0.4))\n",
    "\n",
    "model2.add(Flatten())\n",
    "\n",
    "model2.add(Dense(64, activation='relu'))\n",
    "\n",
    "model2.add(Dropout(0.3))\n",
    "\n",
    "model2.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model2.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "              \n",
    "And I discovered that the accuracy actually largely decrease. So that's not a good way to build the model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "#basically similar code as above \n",
    "model2 = Sequential()\n",
    "\n",
    "model2.add(Conv2D(16, kernel_size=(3, 3),activation='relu',kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model2.add(MaxPooling2D((2, 2)))\n",
    "model2.add(Dropout(0.25))\n",
    "model2.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))\n",
    "model2.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model2.add(Dropout(0.25))\n",
    "model2.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "model2.add(Dropout(0.4))\n",
    "model2.add(Flatten())\n",
    "model2.add(Dense(64, activation='relu'))\n",
    "model2.add(Dropout(0.3))\n",
    "model2.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model2.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3h 32min 38s, sys: 56min 16s, total: 4h 28min 54s\n",
      "Wall time: 1h 39min 25s\n"
     ]
    }
   ],
   "source": [
    "%%time \n",
    "\n",
    "overall_accu2 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model2 = model2.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc2 = train_model2.history['val_acc'][-1]\n",
    "    overall_accu2.append(acc2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9199272725625471"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(overall_accu2)/5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then I tried to add the number of neurons in each conv layer by multiplying by 2 to see how it works:\n",
    "\n",
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(32, kernel_size=(3, 3),activation='relu',kernel_initializer='he_normal',input_shape=(28, 28, 1))\n",
    "\n",
    "model.add(MaxPooling2D((2, 2)))\n",
    "\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Conv2D(128, (3, 3), activation='relu'))\n",
    "\n",
    "model.add(Dropout(0.3))\n",
    "\n",
    "model.add(Flatten())\n",
    "\n",
    "model.add(Dense(128, activation='relu'))\n",
    "\n",
    "model.add(Dropout(0.3))\n",
    "\n",
    "model.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "              \n",
    "The running time is still around 3 hours (actually more than 3 hours) but the accuracy is 0.948 (not anything improving from the second model I used. Since the only difference between this model and my second model is I add a 128 conv layer into the model. So I concluded it's meaningless to add any further conv layers to my model. (adding both 16 and 128 does not improve the performance.) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "#basically similar code as above \n",
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(32, kernel_size=(3, 3),activation='relu',kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model.add(MaxPooling2D((2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "model.add(Conv2D(128, (3, 3), activation='relu'))\n",
    "model.add(Dropout(0.3))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(128, activation='relu'))\n",
    "model.add(Dropout(0.3))\n",
    "model.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 7h 41min 35s, sys: 1h 39min 46s, total: 9h 21min 21s\n",
      "Wall time: 3h 15min 39s\n"
     ]
    }
   ],
   "source": [
    "#basically similar code as above \n",
    "%%time \n",
    "\n",
    "overall_accu = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model = model.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc = train_model.history['val_acc'][-1]\n",
    "    overall_accu.append(acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9483818182078275"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(overall_accu)/5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So After all of these tryings, I decide to use my second model to be as my currently bese model. I have decided the number of the layers, the structure, the parameters in the Conv2D and Maxpooling, then I begin to tune the Dropout terms. \n",
    "\n",
    "I tried to tune the dropout term for the 128 dense layer from 0.3 to 0.25 to see if there's any difference:\n",
    "\n",
    "model3 = Sequential()\n",
    "\n",
    "model3.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "\n",
    "model3.add(MaxPooling2D((2, 2)))\n",
    "\n",
    "model3.add(Dropout(0.25))\n",
    "\n",
    "model3.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "\n",
    "model3.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model3.add(Dropout(0.25))\n",
    "\n",
    "model3.add(Flatten())\n",
    "\n",
    "model3.add(Dense(128, activation='relu'))\n",
    "\n",
    "model3.add(Dropout(0.25))\n",
    "\n",
    "model3.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model3.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "The running time and the accuracy is very very similar to my second model therefore I think that dropout term does not make a large difference on the performance. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "#basically similar code as above \n",
    "model3 = Sequential()\n",
    "\n",
    "model3.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model3.add(MaxPooling2D((2, 2)))\n",
    "model3.add(Dropout(0.25))\n",
    "model3.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model3.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model3.add(Dropout(0.25))\n",
    "model3.add(Flatten())\n",
    "model3.add(Dense(128, activation='relu'))\n",
    "model3.add(Dropout(0.25))\n",
    "model3.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model3.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 6h 58min 52s, sys: 57min 21s, total: 7h 56min 13s\n",
      "Wall time: 2h 47min 17s\n"
     ]
    }
   ],
   "source": [
    "#basically similar code as above \n",
    "%%time \n",
    "\n",
    "overall_accu3 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model3 = model3.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc3 = train_model3.history['val_acc'][-1]\n",
    "    overall_accu3.append(acc3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9579090908830816"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(overall_accu3)/5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After deciding all of these, I made a last move on the dense layers. I tune the dense layers from 128 to be 256 and to see what will happen: (will it be a large improvement on the accuracy?)\n",
    "\n",
    "model3_2 = Sequential()\n",
    "\n",
    "model3_2.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "\n",
    "model3_2.add(MaxPooling2D((2, 2)))\n",
    "\n",
    "model3_2.add(Dropout(0.25))\n",
    "\n",
    "model3_2.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "\n",
    "model3_2.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model3_2.add(Dropout(0.25))\n",
    "\n",
    "model3_2.add(Flatten())\n",
    "\n",
    "model3_2.add(Dense(256, activation='relu'))\n",
    "\n",
    "model3_2.add(Dropout(0.25))\n",
    "\n",
    "model3_2.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model3_2.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "        \n",
    "It turns out that it will have a large improvement on the accuracy: the accuracy being larger than 0.965 and not cost very much running time. So I find out that adding dense layer may be the best way to improve the performance of the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#basically similar code as above \n",
    "model3_2 = Sequential()\n",
    "\n",
    "model3_2.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model3_2.add(MaxPooling2D((2, 2)))\n",
    "model3_2.add(Dropout(0.25))\n",
    "model3_2.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model3_2.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model3_2.add(Dropout(0.25))\n",
    "model3_2.add(Flatten())\n",
    "model3_2.add(Dense(256, activation='relu'))\n",
    "model3_2.add(Dropout(0.25))\n",
    "model3_2.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model3_2.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 7h 18min 50s, sys: 1h 34min 9s, total: 8h 52min 59s\n",
      "Wall time: 3h 31min 3s\n"
     ]
    }
   ],
   "source": [
    "#basically similar code as above \n",
    "%%time \n",
    "\n",
    "overall_accu3_2 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model3_2 = model3_2.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc3_2 = train_model3_2.history['val_acc'][-1]\n",
    "    overall_accu3_2.append(acc3_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.967672727281397"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(overall_accu3_2)/5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I discover increasing the number of dense layer maybe a best way to improve the model performance, so I switch dense layer from 256 to 512 and see what happens: \n",
    "\n",
    "model4 = Sequential()\n",
    "\n",
    "model4.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "\n",
    "model4.add(MaxPooling2D((2, 2)))\n",
    "\n",
    "model4.add(Dropout(0.25))\n",
    "\n",
    "model4.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "\n",
    "model4.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model4.add(Dropout(0.25))\n",
    "\n",
    "model4.add(Flatten())\n",
    "\n",
    "model4.add(Dense(512, activation='relu'))\n",
    "\n",
    "model4.add(Dropout(0.5))\n",
    "\n",
    "model4.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model4.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "              \n",
    "it turns out that the accuracy keep increasing to 0.97+. And the running time does not significantly increases. Total time is nearly the same but my conputer shut down for a moment. So the real running time is still about 3 hours.\n",
    "\n",
    "For here I add my dropout term to be 0.5 because higher dense layer implies larger probability to be overfitting so I add a higher dropout term to avoid overfitting. For here I did not turn much more about the dropout term because i think it's not that useful based on the previous runnings. 0.45,0.5,0.55 will not make a large difference. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#basically similar code as above \n",
    "model4 = Sequential()\n",
    "\n",
    "model4.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model4.add(MaxPooling2D((2, 2)))\n",
    "model4.add(Dropout(0.25))\n",
    "model4.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model4.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model4.add(Dropout(0.25))\n",
    "model4.add(Flatten())\n",
    "model4.add(Dense(512, activation='relu'))\n",
    "model4.add(Dropout(0.5))\n",
    "model4.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model4.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 7h 53min 36s, sys: 1h 34min 43s, total: 9h 28min 20s\n",
      "Wall time: 9h 33min 53s\n"
     ]
    }
   ],
   "source": [
    "#basically similar code as above \n",
    "%%time \n",
    "\n",
    "overall_accu4 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model4 = model4.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc4 = train_model4.history['val_acc'][-1]\n",
    "    overall_accu4.append(acc4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9701454546581616"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(overall_accu4)/5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then I made a last try to tune the number of dense layers to 1028, the accuracy improves a little bit but costs much more time(about two more hour). So I decide to use dense layer = 512 for this dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#basically similar code as above \n",
    "model6 = Sequential()\n",
    "\n",
    "model6.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model6.add(MaxPooling2D((2, 2)))\n",
    "model6.add(Dropout(0.25))\n",
    "model6.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model6.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model6.add(Dropout(0.25))\n",
    "model6.add(Flatten())\n",
    "model6.add(Dense(1028, activation='relu'))\n",
    "model6.add(Dropout(0.5))\n",
    "model6.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model6.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 9h 21min 35s, sys: 1h 54min 39s, total: 11h 16min 14s\n",
      "Wall time: 15h 17min 17s\n"
     ]
    }
   ],
   "source": [
    "#basically similar code as above \n",
    "%%time \n",
    "\n",
    "overall_accu6 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model6 = model6.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc6 = train_model6.history['val_acc'][-1]\n",
    "    overall_accu6.append(acc6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9730000000173396"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(overall_accu6)/5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At last I add the BatchNormalization for each layer to see if there will be any improvements. However, the accuracy decreases. And it costs much much more time to run the alrogithm. \n",
    "\n",
    "Therefore, I decide not to add the BatchNormalization term. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#basically similar code as above \n",
    "model5 = Sequential()\n",
    "\n",
    "model5.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model5.add(BatchNormalization())\n",
    "model5.add(MaxPooling2D((2, 2)))\n",
    "model5.add(Dropout(0.25))\n",
    "model5.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model5.add(BatchNormalization())\n",
    "model5.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model5.add(Dropout(0.25))\n",
    "model5.add(Flatten())\n",
    "model5.add(Dense(512, activation='relu'))\n",
    "model5.add(BatchNormalization())\n",
    "model5.add(Dropout(0.5))\n",
    "model5.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model5.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 19h 40min 23s, sys: 3h 16min 4s, total: 22h 56min 28s\n",
      "Wall time: 1d 10h 14min 2s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "#basically similar code as above \n",
    " \n",
    "overall_accu5 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model5 = model5.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc5 = train_model5.history['val_acc'][-1]\n",
    "    overall_accu5.append(acc5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9679999999566512"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(overall_accu5)/5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At last, I decide my final CNN model to be:\n",
    "\n",
    "model4 = Sequential()\n",
    "\n",
    "model4.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "\n",
    "model4.add(MaxPooling2D((2, 2)))\n",
    "\n",
    "model4.add(Dropout(0.25))\n",
    "\n",
    "model4.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "\n",
    "model4.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model4.add(Dropout(0.25))\n",
    "\n",
    "model4.add(Flatten())\n",
    "\n",
    "model4.add(Dense(512, activation='relu'))\n",
    "\n",
    "model4.add(Dropout(0.5))\n",
    "\n",
    "model4.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model4.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1h 52min 2s, sys: 23min 3s, total: 2h 15min 6s\n",
      "Wall time: 51min 25s\n"
     ]
    }
   ],
   "source": [
    "%%time \n",
    "\n",
    "train_model4 = model4.fit(X, y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This final model takes 51min to train the whole training dataset and I think it's an appropriate time. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After all of these trainings (tuning hyperparameters), I discover that the most important hyperparameter may be the number of layers in the dense. \n",
    "\n",
    "Therefore, in order to present a more clear picture on how the number of dense layers will affect the accuracy (performance of the model), I made a plot: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# append all cross validation accuracy to a single list \n",
    "accus = np.array([overall_accu2,overall_accu,sum(overall_accu3_2)/5,sum(overall_accu4)/5,sum(overall_accu6)/5]) \n",
    "# append the corresponding dense layer number\n",
    "dense = np.array([64,128,256,512,1028])\n",
    "# plot the plot \n",
    "plt.plot(dense,accus)\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Dense layers')\n",
    "plt.title('Cross Validation accuracy vs. dense layers')\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training (Random Forest) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are several parameters in the Random Forest that I want to explain why I was using these:\n",
    "\n",
    "1. criterion (Gini and Entropy)\n",
    "\n",
    "2. max_features\n",
    "\n",
    "3. bootstrap\n",
    "\n",
    "4. n-jobs "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Criterion:\n",
    "\n",
    "\"Gini measurement is the probability of a random sample being classified incorrectly if we randomly pick a label according to the distribution in a branch.\"\n",
    "\n",
    "\"Entropy is a measurement of information (or rather lack thereof). We calculate the information gain by making a split. Which is the difference in entripies. This measures how you reduce the uncertainty about the label.\"\n",
    "\n",
    "Above two sentences is reference to: https://www.quora.com/What-is-difference-between-Gini-Impurity-and-Entropy-in-Decision-Tree. I think it's a very good explanations for these two contents and it's what we learned the definition of these two in the class. So I copy them here. (Cited)\n",
    "\n",
    "For here I use the Gini (which is the default of the random forest function here), because for my personal opinion, Gini works better on continuous variables and Entropy is better for discrete attributes. And Gini tends to minimize misclassification and Gini usually run faster.\n",
    "\n",
    "2. max_features\n",
    "\n",
    "Based on the class note, The best maximum features for each bootstrapping will be the square root of the number of features. Thus I choose the sqrt max_features based on what we learned in class. \n",
    "\n",
    "3. bootstrap\n",
    "\n",
    "I set true for this parameter because it can add more randomness to our model in order to avoid overfitting and correlation errors.\n",
    "\n",
    "4. n-jobs\n",
    "\n",
    "I set this paramter to -1 so we use all processors to the number of jobs to run in parallel for both fit and predict. It can help our algorihm to run faster. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hyperparameter Selection (Random Forest) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this section I will tune the parameter of the Random Forest. Based on the class notes, class readings, and homeworks, and at the same time avoid long-time running, I decide only to tune the n_estimators, which is the number of trees and max_depth, which is the depth of each trees. \n",
    "\n",
    "I use the cross validation to tune the hyperparameter. Unlike the CNN which I divide the training into 5 pieces, this time I divide the training into 10 pieces. I tested n_estimators from [50,100,200,400,700,1000,1500,2000,3000,5000] and max_depth from [4,5,6,8]. \n",
    "\n",
    "The whole cross validation tuning process takes more than a day, it's especially slower when the number of trees and max_depth getting larger. \n",
    "\n",
    "The result can be seen below, it turns out that the number of trees did not affect the accuracy very much, max_depth turns out to be a much important hyperparameter. The highest accuracy occurs at max_depth = 8 and n_estimators = 5000. It shows the trend that higher max_depth resulting higher accuracy. But much lower than CNN. \n",
    "\n",
    "I did not continue tune the parameter for the random forest because obviously when the max_depth and n_estimators get larger the running time of random forest will be very much like the Final CNN model I defined above. \n",
    "\n",
    "However, the accuracy of Random Forest model still much lower than CNN's. Therefore, I can conclude that at similar time, CNN's accuracy is much higher than the Random Forest. Therefore, I choose CNN as my final model decision. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "#prepare the dataset \n",
    "train = np.load('train_images.npy')\n",
    "valid = np.load('test_images.npy')\n",
    "train_label = np.load('train_labels.npy')\n",
    "train_rf = pd.DataFrame(train)\n",
    "valid_rf = pd.DataFrame(valid)\n",
    "train_y_rf = pd.DataFrame(train_label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "kf_rf = KFold(n_splits=10,random_state=2022,shuffle=True) # set the 10 folds cross validation\n",
    "l1 = [50,100,200,400,700,1000,1500,2000,3000,5000] # set the number of trees for tuning parameter\n",
    "l2 = [4,5,6,8] # set the max depth of trees for tuning parameter "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2d 16h 54min 2s, sys: 25min 37s, total: 2d 17h 19min 40s\n",
      "Wall time: 1d 1h 12min 56s\n"
     ]
    }
   ],
   "source": [
    "%%time \n",
    "\n",
    "overall_accu_rf = []\n",
    "for i in l2:\n",
    "    for j in l1:\n",
    "        #for different max depth and different number of trees \n",
    "        tmp_acc = []\n",
    "        # define the randomforest classifier\n",
    "        rf = RandomForestClassifier(n_estimators=j, max_depth=i,n_jobs=-1,random_state=20192019)\n",
    "        for train, test in kf_rf.split(train_rf,train_label):\n",
    "            # change the data to numpy arrays\n",
    "            train_x = np.array(train_rf)[train]\n",
    "            train_y = np.array(train_label)[train]\n",
    "            valid_x = np.array(train_rf)[test]\n",
    "            valid_y = np.array(train_label)[test]\n",
    "            # fit the training data\n",
    "            rf.fit(train_x,train_y)\n",
    "            # pred the validation set \n",
    "            pred = rf.predict(valid_x)\n",
    "            acc_rf = accuracy_score(valid_y, pred)\n",
    "            tmp_acc.append(acc_rf)\n",
    "        overall_accu_rf.append([i,j,sum(tmp_acc)/10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "acc_plt = []\n",
    "n_tree = []\n",
    "acc_plt4 = []\n",
    "acc_plt5 = []\n",
    "acc_plt6 = []\n",
    "acc_plt8 = []\n",
    "n_tree4 = []\n",
    "n_tree5 = []\n",
    "n_tree6 = []\n",
    "n_tree8 = []\n",
    "labels = [4,5,6,8]\n",
    "colors = [\"black\",\"yellow\",\"orange\",\"purple\"] #define the different color for different max depth \n",
    "for n in range(40):\n",
    "    #the first 10 are max_depth 4's accuracy\n",
    "    if n < 10:\n",
    "        acc_plt4.append(overall_accu_rf[n][2])\n",
    "        n_tree4.append(overall_accu_rf[n][1])\n",
    "    #the 11-20 are max_depth 5's accuracy\n",
    "    elif n < 20 and n >= 10:\n",
    "        acc_plt5.append(overall_accu_rf[n][2])\n",
    "        n_tree5.append(overall_accu_rf[n][1])\n",
    "    #the 21-30 are max_depth 5's accuracy\n",
    "    elif n < 30 and n >= 20:\n",
    "        acc_plt6.append(overall_accu_rf[n][2])\n",
    "        n_tree6.append(overall_accu_rf[n][1])\n",
    "    #the 31-40 are max_depth 5's accuracy\n",
    "    elif n < 40 and n >= 30:\n",
    "        acc_plt8.append(overall_accu_rf[n][2])\n",
    "        n_tree8.append(overall_accu_rf[n][1])\n",
    "#append the accuracy and n_tree lists to the overall lists use for visualization \n",
    "acc_plt.append(acc_plt4)\n",
    "acc_plt.append(acc_plt5)\n",
    "acc_plt.append(acc_plt6)\n",
    "acc_plt.append(acc_plt8)\n",
    "n_tree.append(n_tree4)\n",
    "n_tree.append(n_tree5)\n",
    "n_tree.append(n_tree6)\n",
    "n_tree.append(n_tree8)\n",
    "for i, color in zip(range(4),colors):\n",
    "    plt.plot(n_tree[i], acc_plt[i], color=colors[i],label='max_depth {0}' #plot the different max_depth's accuracy\n",
    "    ''.format(labels[i])) #differentiated by the color \n",
    "plt.legend(loc=\"lower right\",prop={'size': 8})\n",
    "plt.xlabel('Number of trees')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('Cross validation accuracy vs number of trees')\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the plot above we can see that number of trees does not make a big difference but max_depth makes a very significant differences. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[8, 5000, 0.8320727272727273]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_acc = 0\n",
    "max_num = 0\n",
    "for n in overall_accu_rf:\n",
    "    if n[2] > max_acc:\n",
    "        max_num = n # Get the maximum accuracy combination \n",
    "n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above is the hyperparameters with the best accuracy, which is tree = 5000 and max_depth = 8. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 53min 50s, sys: 15.2 s, total: 54min 5s\n",
      "Wall time: 18min 58s\n"
     ]
    }
   ],
   "source": [
    "%%time \n",
    "\n",
    "rf = RandomForestClassifier(n_estimators=5000, max_depth=8,n_jobs=-1,random_state=20192019)\n",
    "rf.fit(train_rf,train_label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "num_images = valid.shape[0]\n",
    "X_test = valid.values.reshape(valid.shape[0], 28, 28, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted_classes = model5.predict_classes(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted_classes = pd.DataFrame(predicted_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted_classes.to_csv('pred3.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predictive accuracy "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After submitted my both model predictions to the kaggle I got two accuracy: 0.9266 for CNN and 0.8122 for Random Forest. Although they are both slightly lower than their performance in the train set, it's acceptable. I did not find the severe problem about overfitting. \n",
    "\n",
    "I made a barplot to visualize the accuracy. For here I use accuracy instead of classification error because I think it's basically the same: accuracy = 1- classification error and I think presenting accuracy may be more straightforward. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "accu_list = [0.9701454546581616,0.9266,0.8320727272727273,0.8122] #use to compare the performance of two model\n",
    "name_list = ['CNN train accuracy','CNN test accuracy','Random Forest train accuracy','Random Forest test accuracy']\n",
    "fig = plt.figure(figsize=(12,10))\n",
    "plt.bar(x = name_list,height=accu_list)\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the plot above we can see that CNN is significantly better than the Random Forest model, for both train data and the test data.\n",
    "\n",
    "Then I visualize the predictions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Counter(predicted_classes[0])\n",
    "fig = plt.figure(figsize=(12,10))\n",
    "plt.bar(x = list(Counter(predicted_classes[0]).keys()),height=list(Counter(predicted_classes[0]).values()))\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the visualization above we can see that the prediction for the test test is nearly uniformly distributed, with class 2,7 and 9 slightly more than others. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Errors and the mistakes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I think the largest error/mistake I have made during this competition is that I underestimate the running time of some CNN models and the random Forest model. Therefore, I spent a lot of time running these model and waiting for them to be done. \n",
    "\n",
    "Especially the random forest when I was tuning the n_estimators and the max depth I spent more than a day to run the algorithm. If I know it will take that long I will not include that much potential parameters in the tuning step. \n",
    "\n",
    "I think there are two hardest parts of this competetion. First is that there is a large freedom building the CNN model. There are so many potential hyperparameters (number of layers, numbers of neurons in each layer, combinations, etc). So it's definitely a hard task to find the optimal model. The second hardest part is the running time of the model. Since it usually takes a long time to run the CNN and large random forest model, especially I also have to run the cross validation. So It really cost a lot of time in model trainings. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Codes"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "# import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPooling2D,BatchNormalization\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "from collections import Counter\n",
    "\n",
    "# Codes to load the dataset \n",
    "train = np.load('train_images.npy')\n",
    "valid = np.load('test_images.npy')\n",
    "train_label = np.load('train_labels.npy')\n",
    "# change the data into pandas dataframe\n",
    "train = pd.DataFrame(train)\n",
    "valid = pd.DataFrame(valid)\n",
    "train_label = pd.DataFrame(train_label)\n",
    "train_label.columns = ['labels']\n",
    "\n",
    "#create the dictionary for each labels \n",
    "#used to output the different fashion styles numbers\n",
    "data_label = {0 : \"T-shirt\", 1: \"Pants\", 2: \"Heavier than shirt\", 3: \"Dress\", 4: \"Coat\",\n",
    "          5: \"Sandal\", 6: \"Shirt\", 7: \"Sneaker\", 8: \"Bag\", 9: \"Ankle Boot\"}\n",
    "\n",
    "label_c = train_label[\"labels\"].value_counts() #count the different label appearance time \n",
    "label_c.keys()[1]\n",
    "d = {}\n",
    "for i in range(len(label_c)):\n",
    "    #append the value counts to the corresponding label names in the data_label dic created above\n",
    "    index = label_c.keys()[i]# get the keys\n",
    "    l = data_label[index] #corresponding to the label name\n",
    "    d[l] = label_c[i]# match the value counts \n",
    "d\n",
    "\n",
    "#Create the visualization of the dic above \n",
    "dd = pd.DataFrame(d,index=[0]).T\n",
    "dd.columns = ['num']\n",
    "fig = plt.subplots(figsize=(15,5))\n",
    "plt.bar(dd.index,dd.num)\n",
    "pass\n",
    "\n",
    "labels = np.load('train_labels.npy')\n",
    "train2 = train.copy()\n",
    "train2['labels'] = labels\n",
    "\n",
    "plt_images = []\n",
    "plt_labels = []\n",
    "\n",
    "    \n",
    "for i in label_c.keys():\n",
    "    #for all labels i in the dataset \n",
    "    s = train2[train2[\"labels\"] == i] # get all observations with the corresponding label i\n",
    "    sample = s.sample(n=5) #randomly sample 5 observations from this label \n",
    "    for j, s in enumerate(sample.values):\n",
    "        img = np.array(sample.iloc[j, :-1]).reshape(28,28) #reshape each observation back to 28x28 pixel matrix\n",
    "        plt_images.append(img) #append the images, used to visualizing \n",
    "        plt_labels.append(sample.iloc[j, -1]) #append the label \n",
    "\n",
    "#plot these sample images for each label \n",
    "f, ax = plt.subplots(5,10, figsize=(16,12))\n",
    "\n",
    "for i, img in enumerate(plt_images):\n",
    "    ax[i//10, i%10].imshow(img, cmap='Blues')\n",
    "    ax[i//10, i%10].axis('off')\n",
    "    ax[i//10, i%10].set_title(data_label[plt_labels[i]])\n",
    "plt.show()    \n",
    "\n",
    "\n",
    "y = keras.utils.to_categorical(train_label.labels, 10) #alternate the dataset ready for CNN \n",
    "num_images = train.shape[0]\n",
    "x_as_array = train.values\n",
    "X = train.values.reshape(num_images, 28, 28, 1)# get ready the X for CNN \n",
    "kf = KFold(n_splits=5,random_state=2019,shuffle=True)# 5 folds split the data \n",
    "\n",
    "model1 = Sequential()# define the model \n",
    "\n",
    "#first add 32 Conv layer \n",
    "model1.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "#Add a maxpooling layer\n",
    "model1.add(MaxPooling2D((2, 2)))\n",
    "# Add dropout term to avoid overfitting\n",
    "model1.add(Dropout(0.25))\n",
    "# Then add 64 conv layer \n",
    "model1.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "# Add a Maxpooling\n",
    "model1.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "#Add dropout term to avoid overfitting\n",
    "model1.add(Dropout(0.25))\n",
    "#Flatten to prepare for the dense layer\n",
    "model1.add(Flatten())\n",
    "#Add a 64 layer dense layer\n",
    "model1.add(Dense(64, activation='relu'))\n",
    "#Add dropout term to avoid overfitting\n",
    "model1.add(Dropout(0.3))\n",
    "# use softmax to classify to each labels \n",
    "model1.add(Dense(10, activation='softmax'))\n",
    "\n",
    "# define the loss, optimizer and metrics. \n",
    "model1.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "%%time #to calculate the time used \n",
    "\n",
    "overall_accu1 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    # transform train and valid x,y to numpy array\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    # fit the model \n",
    "    train_model1 = model1.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    # get the validation accuracy for each fold \n",
    "    acc1 = train_model1.history['val_acc'][-1]\n",
    "    overall_accu1.append(acc1)\n",
    "\n",
    "sum(overall_accu1)/5\n",
    "\n",
    "#basically same code as above\n",
    "model11 = Sequential()\n",
    "\n",
    "model11.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model11.add(MaxPooling2D((2, 2)))\n",
    "model11.add(Dropout(0.25))\n",
    "model11.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model11.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model11.add(Dropout(0.25))\n",
    "model11.add(Flatten())\n",
    "model11.add(Dense(128, activation='relu'))\n",
    "model11.add(Dropout(0.3))\n",
    "model11.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model11.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "%%time\n",
    "\n",
    "overall_accu11 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model11 = model11.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc11 = train_model11.history['val_acc'][-1]\n",
    "    overall_accu11.append(acc11)\n",
    "\n",
    "sum(overall_accu11)/5\n",
    "\n",
    "#basically same code as above\n",
    "model111 = Sequential()\n",
    "\n",
    "#add two consecutive 32 Conv2D layer \n",
    "model111.add(Conv2D(32, kernel_size=(5, 5),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model111.add(Conv2D(32, kernel_size=(5, 5),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model111.add(MaxPooling2D((2, 2)))\n",
    "model111.add(Dropout(0.25))\n",
    "#add two consecutive 64 Conv2D layer \n",
    "model111.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model111.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model111.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model111.add(Dropout(0.25))\n",
    "model111.add(Flatten())\n",
    "model111.add(Dense(128, activation='relu'))\n",
    "model111.add(Dropout(0.3))\n",
    "model111.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model111.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "%%time\n",
    "\n",
    "overall_accu111 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model111 = model111.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc111 = train_model111.history['val_acc'][-1]\n",
    "    overall_accu111.append(acc111)\n",
    "\n",
    "sum(overall_accu111)/5\n",
    "\n",
    "#basically similar code as above \n",
    "model2 = Sequential()\n",
    "\n",
    "model2.add(Conv2D(16, kernel_size=(3, 3),activation='relu',kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model2.add(MaxPooling2D((2, 2)))\n",
    "model2.add(Dropout(0.25))\n",
    "model2.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))\n",
    "model2.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model2.add(Dropout(0.25))\n",
    "model2.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "model2.add(Dropout(0.4))\n",
    "model2.add(Flatten())\n",
    "model2.add(Dense(64, activation='relu'))\n",
    "model2.add(Dropout(0.3))\n",
    "model2.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model2.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "\n",
    "%%time \n",
    "\n",
    "overall_accu2 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model2 = model2.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc2 = train_model2.history['val_acc'][-1]\n",
    "    overall_accu2.append(acc2)\n",
    "\n",
    "sum(overall_accu2)/5\n",
    "\n",
    "#basically similar code as above \n",
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(32, kernel_size=(3, 3),activation='relu',kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model.add(MaxPooling2D((2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "model.add(Conv2D(128, (3, 3), activation='relu'))\n",
    "model.add(Dropout(0.3))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(128, activation='relu'))\n",
    "model.add(Dropout(0.3))\n",
    "model.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "#basically similar code as above \n",
    "%%time \n",
    "\n",
    "overall_accu = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model = model.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc = train_model.history['val_acc'][-1]\n",
    "    overall_accu.append(acc)\n",
    "\n",
    "sum(overall_accu)/5\n",
    "\n",
    "#basically similar code as above \n",
    "model3 = Sequential()\n",
    "\n",
    "model3.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model3.add(MaxPooling2D((2, 2)))\n",
    "model3.add(Dropout(0.25))\n",
    "model3.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model3.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model3.add(Dropout(0.25))\n",
    "model3.add(Flatten())\n",
    "model3.add(Dense(128, activation='relu'))\n",
    "model3.add(Dropout(0.25))\n",
    "model3.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model3.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "#basically similar code as above \n",
    "%%time \n",
    "\n",
    "overall_accu3 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model3 = model3.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc3 = train_model3.history['val_acc'][-1]\n",
    "    overall_accu3.append(acc3)\n",
    "\n",
    "sum(overall_accu3)/5\n",
    "\n",
    "#basically similar code as above \n",
    "model3_2 = Sequential()\n",
    "\n",
    "model3_2.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model3_2.add(MaxPooling2D((2, 2)))\n",
    "model3_2.add(Dropout(0.25))\n",
    "model3_2.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model3_2.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model3_2.add(Dropout(0.25))\n",
    "model3_2.add(Flatten())\n",
    "model3_2.add(Dense(256, activation='relu'))\n",
    "model3_2.add(Dropout(0.25))\n",
    "model3_2.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model3_2.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "#basically similar code as above \n",
    "%%time \n",
    "\n",
    "overall_accu3_2 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model3_2 = model3_2.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc3_2 = train_model3_2.history['val_acc'][-1]\n",
    "    overall_accu3_2.append(acc3_2)\n",
    "\n",
    "sum(overall_accu3_2)/5\n",
    "\n",
    "#basically similar code as above \n",
    "model4 = Sequential()\n",
    "\n",
    "model4.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model4.add(MaxPooling2D((2, 2)))\n",
    "model4.add(Dropout(0.25))\n",
    "model4.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model4.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model4.add(Dropout(0.25))\n",
    "model4.add(Flatten())\n",
    "model4.add(Dense(512, activation='relu'))\n",
    "model4.add(Dropout(0.5))\n",
    "model4.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model4.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "#basically similar code as above \n",
    "%%time \n",
    "\n",
    "overall_accu4 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model4 = model4.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc4 = train_model4.history['val_acc'][-1]\n",
    "    overall_accu4.append(acc4)\n",
    "\n",
    "sum(overall_accu4)/5\n",
    "\n",
    "#basically similar code as above \n",
    "model6 = Sequential()\n",
    "\n",
    "model6.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model6.add(MaxPooling2D((2, 2)))\n",
    "model6.add(Dropout(0.25))\n",
    "model6.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model6.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model6.add(Dropout(0.25))\n",
    "model6.add(Flatten())\n",
    "model6.add(Dense(1028, activation='relu'))\n",
    "model6.add(Dropout(0.5))\n",
    "model6.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model6.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "#basically similar code as above \n",
    "%%time \n",
    "\n",
    "overall_accu6 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model6 = model6.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc6 = train_model6.history['val_acc'][-1]\n",
    "    overall_accu6.append(acc6)\n",
    "\n",
    "sum(overall_accu6)/5\n",
    "\n",
    "#basically similar code as above \n",
    "model5 = Sequential()\n",
    "\n",
    "model5.add(Conv2D(32, kernel_size=(3, 3),activation='relu', kernel_initializer='he_normal',input_shape=(28, 28, 1)))\n",
    "model5.add(BatchNormalization())\n",
    "model5.add(MaxPooling2D((2, 2)))\n",
    "model5.add(Dropout(0.25))\n",
    "model5.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n",
    "model5.add(BatchNormalization())\n",
    "model5.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model5.add(Dropout(0.25))\n",
    "model5.add(Flatten())\n",
    "model5.add(Dense(512, activation='relu'))\n",
    "model5.add(BatchNormalization())\n",
    "model5.add(Dropout(0.5))\n",
    "model5.add(Dense(10, activation='softmax'))\n",
    "\n",
    "\n",
    "model5.compile(loss=keras.losses.categorical_crossentropy,\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "%%time\n",
    "#basically similar code as above \n",
    " \n",
    "overall_accu5 = []\n",
    "for train, test in kf.split(X,y):\n",
    "    train_x = np.array(X)[train]\n",
    "    train_y = np.array(y)[train]\n",
    "    valid_x = np.array(X)[test]\n",
    "    valid_y = np.array(y)[test]\n",
    "    train_model5 = model5.fit(train_x, train_y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0,\n",
    "                  validation_data=(valid_x, valid_y))\n",
    "    acc5 = train_model5.history['val_acc'][-1]\n",
    "    overall_accu5.append(acc5)\n",
    "\n",
    "sum(overall_accu5)/5\n",
    "\n",
    "%%time \n",
    "\n",
    "train_model4 = model4.fit(X, y,\n",
    "                  batch_size=128,\n",
    "                  epochs=50,\n",
    "                  verbose=0)\n",
    "\n",
    "# append all cross validation accuracy to a single list \n",
    "accus = np.array([overall_accu2,overall_accu,sum(overall_accu3_2)/5,sum(overall_accu4)/5,sum(overall_accu6)/5]) \n",
    "# append the corresponding dense layer number\n",
    "dense = np.array([64,128,256,512,1028])\n",
    "# plot the plot \n",
    "plt.plot(dense,accus)\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Dense layers')\n",
    "plt.title('Cross Validation accuracy vs. dense layers')\n",
    "pass\n",
    "\n",
    "#prepare the dataset \n",
    "train = np.load('train_images.npy')\n",
    "valid = np.load('test_images.npy')\n",
    "train_label = np.load('train_labels.npy')\n",
    "train_rf = pd.DataFrame(train)\n",
    "valid_rf = pd.DataFrame(valid)\n",
    "train_y_rf = pd.DataFrame(train_label)\n",
    "\n",
    "kf_rf = KFold(n_splits=10,random_state=2022,shuffle=True) # set the 10 folds cross validation\n",
    "l1 = [50,100,200,400,700,1000,1500,2000,3000,5000] # set the number of trees for tuning parameter\n",
    "l2 = [4,5,6,8] # set the max depth of trees for tuning parameter\n",
    "\n",
    "%%time \n",
    "\n",
    "overall_accu_rf = []\n",
    "for i in l2:\n",
    "    for j in l1:\n",
    "        #for different max depth and different number of trees \n",
    "        tmp_acc = []\n",
    "        # define the randomforest classifier\n",
    "        rf = RandomForestClassifier(n_estimators=j, max_depth=i,n_jobs=-1,random_state=20192019)\n",
    "        for train, test in kf_rf.split(train_rf,train_label):\n",
    "            # change the data to numpy arrays\n",
    "            train_x = np.array(train_rf)[train]\n",
    "            train_y = np.array(train_label)[train]\n",
    "            valid_x = np.array(train_rf)[test]\n",
    "            valid_y = np.array(train_label)[test]\n",
    "            # fit the training data\n",
    "            rf.fit(train_x,train_y)\n",
    "            # pred the validation set \n",
    "            pred = rf.predict(valid_x)\n",
    "            acc_rf = accuracy_score(valid_y, pred)\n",
    "            tmp_acc.append(acc_rf)\n",
    "        overall_accu_rf.append([i,j,sum(tmp_acc)/10])\n",
    "\n",
    "acc_plt = []\n",
    "n_tree = []\n",
    "acc_plt4 = []\n",
    "acc_plt5 = []\n",
    "acc_plt6 = []\n",
    "acc_plt8 = []\n",
    "n_tree4 = []\n",
    "n_tree5 = []\n",
    "n_tree6 = []\n",
    "n_tree8 = []\n",
    "labels = [4,5,6,8]\n",
    "colors = [\"black\",\"yellow\",\"orange\",\"purple\"] #define the different color for different max depth \n",
    "for n in range(40):\n",
    "    #the first 10 are max_depth 4's accuracy\n",
    "    if n < 10:\n",
    "        acc_plt4.append(overall_accu_rf[n][2])\n",
    "        n_tree4.append(overall_accu_rf[n][1])\n",
    "    #the 11-20 are max_depth 5's accuracy\n",
    "    elif n < 20 and n >= 10:\n",
    "        acc_plt5.append(overall_accu_rf[n][2])\n",
    "        n_tree5.append(overall_accu_rf[n][1])\n",
    "    #the 21-30 are max_depth 5's accuracy\n",
    "    elif n < 30 and n >= 20:\n",
    "        acc_plt6.append(overall_accu_rf[n][2])\n",
    "        n_tree6.append(overall_accu_rf[n][1])\n",
    "    #the 31-40 are max_depth 5's accuracy\n",
    "    elif n < 40 and n >= 30:\n",
    "        acc_plt8.append(overall_accu_rf[n][2])\n",
    "        n_tree8.append(overall_accu_rf[n][1])\n",
    "#append the accuracy and n_tree lists to the overall lists use for visualization \n",
    "acc_plt.append(acc_plt4)\n",
    "acc_plt.append(acc_plt5)\n",
    "acc_plt.append(acc_plt6)\n",
    "acc_plt.append(acc_plt8)\n",
    "n_tree.append(n_tree4)\n",
    "n_tree.append(n_tree5)\n",
    "n_tree.append(n_tree6)\n",
    "n_tree.append(n_tree8)\n",
    "for i, color in zip(range(4),colors):\n",
    "    plt.plot(n_tree[i], acc_plt[i], color=colors[i],label='max_depth {0}' #plot the different max_depth's accuracy\n",
    "    ''.format(labels[i])) #differentiated by the color \n",
    "plt.legend(loc=\"lower right\",prop={'size': 8})\n",
    "plt.xlabel('Number of trees')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('Cross validation accuracy vs number of trees')\n",
    "pass\n",
    "\n",
    "max_acc = 0\n",
    "max_num = 0\n",
    "for n in overall_accu_rf:\n",
    "    if n[2] > max_acc:\n",
    "        max_num = n # Get the maximum accuracy combination \n",
    "n\n",
    "\n",
    "%%time \n",
    "\n",
    "rf = RandomForestClassifier(n_estimators=5000, max_depth=8,n_jobs=-1,random_state=20192019)\n",
    "rf.fit(train_rf,train_label)\n",
    "num_images = valid.shape[0]\n",
    "X_test = valid.values.reshape(valid.shape[0], 28, 28, 1)\n",
    "\n",
    "predicted_classes = model5.predict_classes(X_test)\n",
    "predicted_classes = pd.DataFrame(predicted_classes)\n",
    "accu_list = [0.9701454546581616,0.9266,0.8320727272727273,0.8122] #use to compare the performance of two model\n",
    "name_list = ['CNN train accuracy','CNN test accuracy','Random Forest train accuracy','Random Forest test accuracy']\n",
    "fig = plt.figure(figsize=(12,10))\n",
    "plt.bar(x = name_list,height=accu_list)\n",
    "pass\n",
    "\n",
    "Counter(predicted_classes[0])\n",
    "fig = plt.figure(figsize=(12,10))\n",
    "plt.bar(x = list(Counter(predicted_classes[0]).keys()),height=list(Counter(predicted_classes[0]).values()))\n",
    "pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
